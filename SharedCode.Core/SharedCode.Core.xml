<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharedCode.Core</name>
    </assembly>
    <members>
        <member name="T:SharedCode.DateTimeOffsetExtensions">
            <summary>
            DateTimeOffset Extensions
            </summary>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.AddBusinessDays(System.DateTimeOffset,System.Int32)">
            <summary>
            Adds the given number of business days to the <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="current">The date to be changed.</param>
            <param name="days">Number of business days to be added.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset" /> increased by a given number of business days.
            </returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.AddWeekdays(System.DateTimeOffset,System.Int32)">
            <summary>
            Adds the specified number of weekdays to the date/time.
            </summary>
            <param name="date">The date/time.</param>
            <param name="days">The number of days.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.At(System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>
            Returns the given <see cref="T:System.DateTimeOffset" /> with hour and minutes set At given values.
            </summary>
            <param name="current">The current <see cref="T:System.DateTimeOffset" /> to be changed.</param>
            <param name="hour">The hour to set time to.</param>
            <param name="minute">The minute to set time to.</param>
            <returns><see cref="T:System.DateTimeOffset" /> with hour and minute set to given values.</returns>
            ReSharper disable MethodNamesNotMeaningful
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.At(System.DateTimeOffset,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the given <see cref="T:System.DateTimeOffset" /> with hour and minutes and seconds set At
            given values.
            </summary>
            <param name="current">The current <see cref="T:System.DateTimeOffset" /> to be changed.</param>
            <param name="hour">The hour to set time to.</param>
            <param name="minute">The minute to set time to.</param>
            <param name="second">The second to set time to.</param>
            <returns>
            <see cref="T:System.DateTimeOffset" /> with hour and minutes and seconds set to given values.
            </returns>
            ReSharper disable MethodNamesNotMeaningful
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.BeginningOfDay(System.DateTimeOffset)">
            <summary>
            Returns the Start of the given day (the first millisecond of the given <see
            cref="T:System.DateTimeOffset" />).
            </summary>
            <param name="date">The date.</param>
            <returns>A date/time at the beginning of the day (midnight).</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.Between(System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset,System.Boolean)">
            <summary>
            Returns true if the date and time fall between the start and end dates, inclusive or not
            of the end date and time.
            </summary>
            <param name="DateTimeOffset">The date time.</param>
            <param name="startDateTimeOffset">The start date time.</param>
            <param name="endDateTimeOffset">The end date time.</param>
            <param name="endInclusive">if set to <c>true</c> [end inclusive].</param>
            <returns>
            <c>true</c> if the date and time fall between the start and end dates, inclusive or not
            of the end date and time, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.Ceiling(System.DateTimeOffset,System.TimeSpan)">
             <summary>
             Rounds the specified DateTimeOffset up to the next TimeSpan
             </summary>
             <param name="date">The DateTimeOffset to round.</param>
             <param name="span">The TimeSpan to round by.</param>
             <returns>The rounded DateTimeOffset.</returns>
             <example>
             Rounds to nearest minute (replace 1 for 10 to get nearest 10 minutes)
             <code>
            MyDate.Ceiling(new TimeSpan(0,1,0));
             </code>
             </example>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.DecreaseTime(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Decreases the <see cref="T:System.DateTimeOffset" /> object with given <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="startDate">The start Date.</param>
            <param name="toSubtract">The to Subtract.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.EndOfDay(System.DateTimeOffset)">
            <summary>
            Returns the very end of the given day (the last millisecond of the last hour for the
            given <see cref="T:System.DateTimeOffset" /> ).
            </summary>
            <param name="date">The date.</param>
            <returns>A date/time with time at the end of the day. (23:59:59.999)</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.FirstDayOfMonth(System.DateTimeOffset)">
            <summary>
            Sets the day of the <see cref="T:System.DateTimeOffset" /> to the first day in that month.
            </summary>
            <param name="current">The current <see cref="T:System.DateTimeOffset" /> to be changed.</param>
            <returns>
            given <see cref="T:System.DateTimeOffset" /> with the day part set to the first day in that month.
            </returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.Floor(System.DateTimeOffset,System.TimeSpan)">
             <summary>
             Rounds the specified DateTimeOffset down to the next TimeSpan
             </summary>
             <param name="date">The DateTimeOffset to round.</param>
             <param name="span">The TimeSpan to round by.</param>
             <returns>The rounded DateTimeOffset.</returns>
             <example>
             Rounds to nearest minute (replace 1 for 10 to get nearest 10 minutes)
             <code>
            MyDate.Floor(new TimeSpan(0,1,0));
             </code>
             </example>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.IncreaseTime(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Increases the <see cref="T:System.DateTimeOffset" /> object with given <see cref="T:System.TimeSpan" /> value.
            </summary>
            <param name="startDate">The start Date.</param>
            <param name="toAdd">The to Add.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.IsAfter(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Determines whether the specified <see cref="T:System.DateTimeOffset" /> value is After then
            current value.
            </summary>
            <param name="current">The current value.</param>
            <param name="toCompareWith">Value to compare with.</param>
            <returns><c>true</c> if the specified current is after; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.IsBefore(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Determines whether the specified <see cref="T:System.DateTimeOffset" /> is before then current value.
            </summary>
            <param name="current">The current value.</param>
            <param name="toCompareWith">Value to compare with.</param>
            <returns><c>true</c> if the specified current is before; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.IsInFuture(System.DateTimeOffset)">
            <summary>
            Determine if a <see cref="T:System.DateTimeOffset" /> is in the future.
            </summary>
            <param name="dateTimeOffset">The date to be checked.</param>
            <returns>
            <c>true</c> if <paramref name="dateTimeOffset" /> is in the future; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.IsInPast(System.DateTimeOffset)">
            <summary>
            Determine if a <see cref="T:System.DateTimeOffset" /> is in the past.
            </summary>
            <param name="dateTimeOffset">The date to be checked.</param>
            <returns>
            <c>true</c> if <paramref name="dateTimeOffset" /> is in the past; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.LastDayOfMonth(System.DateTimeOffset)">
            <summary>
            Sets the day of the <see cref="T:System.DateTimeOffset" /> to the last day in that month.
            </summary>
            <param name="current">The current DateTimeOffset to be changed.</param>
            <returns>
            given <see cref="T:System.DateTimeOffset" /> with the day part set to the last day in that month.
            </returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.Midnight(System.DateTimeOffset)">
            <summary>
            Returns original <see cref="T:System.DateTimeOffset" /> value with time part set to midnight
            (alias for <see cref="M:SharedCode.DateTimeOffsetExtensions.BeginningOfDay(System.DateTimeOffset)" /> method).
            </summary>
            <param name="value">The value.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.Next(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Returns first next occurrence of specified <see cref="T:System.DayOfWeek" />.
            </summary>
            <param name="start">The start.</param>
            <param name="day">The day.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.NextDay(System.DateTimeOffset)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> increased by 24 hours i.e. Next Day.
            </summary>
            <param name="start">The start.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.NextYear(System.DateTimeOffset)">
            <summary>
            Returns the same date (same Day, Month, Hour, Minute, Second etc) in the next calendar
            year. If that day does not exist in next year in same month, number of missing days is
            added to the last day in same month next year.
            </summary>
            <param name="start">The start.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.Noon(System.DateTimeOffset)">
            <summary>
            Returns original <see cref="T:System.DateTimeOffset" /> value with time part set to Noon (12:00:00h).
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset" /> find Noon for.</param>
            <returns>A <see cref="T:System.DateTimeOffset" /> value with time part set to Noon (12:00:00h).</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.Previous(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Returns first next occurrence of specified <see cref="T:System.DayOfWeek" />.
            </summary>
            <param name="start">The start.</param>
            <param name="day">The day.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.PreviousDay(System.DateTimeOffset)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> decreased by 24h period i.e. Previous Day.
            </summary>
            <param name="start">The start.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.PreviousYear(System.DateTimeOffset)">
            <summary>
            Returns the same date (same Day, Month, Hour, Minute, Second etc) in the previous
            calendar year. If that day does not exist in previous year in same month, number of
            missing days is added to the last day in same month previous year.
            </summary>
            <param name="start">The start.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.Round(System.DateTimeOffset,System.TimeSpan)">
             <summary>
             Rounds the specified DateTimeOffset to the nearest TimeSpan
             </summary>
             <param name="date">The DateTimeOffset to round.</param>
             <param name="span">The TimeSpan to round by.</param>
             <returns>The rounded DateTimeOffset.</returns>
             <example>
             Rounds to nearest minute (replace 1 for 10 to get nearest 10 minutes)
             <code>
            MyDate.Floor(new TimeSpan(0,1,0));
             </code>
             </example>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetDate(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> with changed Year part.
            </summary>
            <param name="value">The value.</param>
            <param name="year">The year.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetDate(System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> with changed Year and Month part.
            </summary>
            <param name="value">The value.</param>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetDate(System.DateTimeOffset,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> with changed Year, Month and Day part.
            </summary>
            <param name="value">The value.</param>
            <param name="year">The year.</param>
            <param name="month">The month.</param>
            <param name="day">The day.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetDay(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> with changed Day part.
            </summary>
            <param name="value">The value.</param>
            <param name="day">The day.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetHour(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> with changed Hour part.
            </summary>
            <param name="originalDate">The original Date.</param>
            <param name="hour">The hour.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetMillisecond(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> with changed Millisecond part.
            </summary>
            <param name="originalDate">The original Date.</param>
            <param name="millisecond">The millisecond.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetMinute(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> with changed Minute part.
            </summary>
            <param name="originalDate">The original Date.</param>
            <param name="minute">The minute.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetMonth(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> with changed Month part.
            </summary>
            <param name="value">The value.</param>
            <param name="month">The month.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetSecond(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> with changed Second part.
            </summary>
            <param name="originalDate">The original Date.</param>
            <param name="second">The second.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetTime(System.DateTimeOffset,System.Int32)">
            <summary>
            Sets the time.
            </summary>
            <param name="date">The date/time.</param>
            <param name="hour">The number of hours.</param>
            <returns>The date/time with the time set as specified.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>
            Sets the time.
            </summary>
            <param name="date">The date/time.</param>
            <param name="hour">The number of hours.</param>
            <param name="minute">The number of minutes.</param>
            <returns>The date/time with the time set as specified.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time.
            </summary>
            <param name="date">The date/time.</param>
            <param name="hour">The number of hours.</param>
            <param name="minute">The number of minutes.</param>
            <param name="second">The number of seconds.</param>
            <returns>The date/time with the time set as specified.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the time.
            </summary>
            <param name="date">The date/time.</param>
            <param name="hour">The number of hours.</param>
            <param name="minute">The number of minutes.</param>
            <param name="second">The number of seconds.</param>
            <param name="millisecond">The number of milliseconds.</param>
            <returns>The date/time with the time set as specified.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SetYear(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns <see cref="T:System.DateTimeOffset" /> with changed Year part.
            </summary>
            <param name="value">The value.</param>
            <param name="year">The year.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.StartOfWeek(System.DateTimeOffset)">
            <summary>
            Returns a DateTimeOffset adjusted to the beginning of the week.
            </summary>
            <param name="DateTimeOffset">The DateTimeOffset to adjust</param>
            <returns>A DateTimeOffset instance adjusted to the beginning of the current week</returns>
            <remarks>the beginning of the week is controlled by the current Culture</remarks>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.SubtractBusinessDays(System.DateTimeOffset,System.Int32)">
            <summary>
            Subtracts the given number of business days to the <see cref="T:System.DateTimeOffset" />.
            </summary>
            <param name="current">The date to be changed.</param>
            <param name="days">Number of business days to be subtracted.</param>
            <returns>
            A <see cref="T:System.DateTimeOffset" /> increased by a given number of business days.
            </returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.ToRelativeDateString(System.DateTimeOffset)">
            <summary>
            Returns the relative date string.
            </summary>
            <param name="date">The date/time.</param>
            <returns>The relative date string.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.ToRelativeDateStringUtc(System.DateTimeOffset)">
            <summary>
            Returns the relative date string for UTC time.
            </summary>
            <param name="date">The date/time.</param>
            <returns>The relative date string for UTC time.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.ToString(System.Nullable{System.DateTimeOffset})">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="date">The date/time.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.ToString(System.Nullable{System.DateTimeOffset},System.String)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="date">The date/time.</param>
            <param name="format">The format string.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.ToString(System.Nullable{System.DateTimeOffset},System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="date">The date/time.</param>
            <param name="provider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.ToString(System.Nullable{System.DateTimeOffset},System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="date">The date/time.</param>
            <param name="format">The format string.</param>
            <param name="provider">The format provider.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.WeekAfter(System.DateTimeOffset)">
            <summary>
            Increases supplied <see cref="T:System.DateTimeOffset" /> for 7 days i.e. returns the Next Week.
            </summary>
            <param name="start">The start.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.WeekEarlier(System.DateTimeOffset)">
            <summary>
            Decreases supplied <see cref="T:System.DateTimeOffset" /> for 7 days i.e. returns the Previous Week.
            </summary>
            <param name="start">The start.</param>
            <returns>The <see cref="T:System.DateTimeOffset" />.</returns>
        </member>
        <member name="M:SharedCode.DateTimeOffsetExtensions.GetRelativeDateValue(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Gets the relative date value.
            </summary>
            <param name="date">The date/time.</param>
            <param name="comparedTo">The date/time to compare to.</param>
            <returns>The relative date value.</returns>
        </member>
        <member name="T:SharedCode.FluentTimeSpan">
            <summary>
            The fluent time span.
            </summary>
        </member>
        <member name="F:SharedCode.FluentTimeSpan.DaysPerYear">
            <summary>
            The days per year.
            </summary>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.Months">
            <summary>
            Gets or sets Months.
            </summary>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.Years">
            <summary>
            Gets or sets Years.
            </summary>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.TimeSpan">
            <summary>
            Gets or sets TimeSpan.
            </summary>
            <value>TimeSpan.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.Ticks">
            <summary>
            Gets the ticks.
            </summary>
            <value>The ticks.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.Days">
            <summary>
            Gets the days.
            </summary>
            <value>The days.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.Hours">
            <summary>
            Gets the hours.
            </summary>
            <value>The hours.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.Milliseconds">
            <summary>
            Gets the milliseconds.
            </summary>
            <value>The milliseconds.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.Minutes">
            <summary>
            Gets the minutes.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.Seconds">
            <summary>
            Gets the seconds.
            </summary>
            <value>The seconds.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.TotalDays">
            <summary>
            Gets the total days.
            </summary>
            <value>The total days.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.TotalHours">
            <summary>
            Gets the total hours.
            </summary>
            <value>The total hours.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.TotalMilliseconds">
            <summary>
            Gets the total milliseconds.
            </summary>
            <value>The total milliseconds.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.TotalMinutes">
            <summary>
            Gets the total minutes.
            </summary>
            <value>The total minutes.</value>
        </member>
        <member name="P:SharedCode.FluentTimeSpan.TotalSeconds">
            <summary>
            Gets the total seconds.
            </summary>
            <value>The total seconds.</value>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Addition(SharedCode.FluentTimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Addition(SharedCode.FluentTimeSpan,System.TimeSpan)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Addition(System.TimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Subtraction(SharedCode.FluentTimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Subtraction(System.TimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Subtraction(SharedCode.FluentTimeSpan,System.TimeSpan)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Equality(SharedCode.FluentTimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Equality(System.TimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Equality(SharedCode.FluentTimeSpan,System.TimeSpan)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Inequality(SharedCode.FluentTimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Inequality(System.TimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Inequality(SharedCode.FluentTimeSpan,System.TimeSpan)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_UnaryNegation(SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_LessThan(SharedCode.FluentTimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_LessThan(SharedCode.FluentTimeSpan,System.TimeSpan)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_LessThan(System.TimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_LessThanOrEqual(SharedCode.FluentTimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_LessThanOrEqual(SharedCode.FluentTimeSpan,System.TimeSpan)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_LessThanOrEqual(System.TimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_GreaterThan(SharedCode.FluentTimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_GreaterThan(SharedCode.FluentTimeSpan,System.TimeSpan)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_GreaterThan(System.TimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_GreaterThanOrEqual(SharedCode.FluentTimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_GreaterThanOrEqual(SharedCode.FluentTimeSpan,System.TimeSpan)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_GreaterThanOrEqual(System.TimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Implicit(SharedCode.FluentTimeSpan)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:SharedCode.FluentTimeSpan" /> to <see
            cref="P:SharedCode.FluentTimeSpan.TimeSpan" />.
            </summary>
            <param name="fluentTimeSpan">The FluentTimeSpan.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.op_Implicit(System.TimeSpan)~SharedCode.FluentTimeSpan">
            <summary>
            Performs an implicit conversion from a <see cref="P:SharedCode.FluentTimeSpan.TimeSpan" /> to <see
            cref="T:SharedCode.FluentTimeSpan" />.
            </summary>
            <param name="timeSpan">The <see cref="P:SharedCode.FluentTimeSpan.TimeSpan" /> that will be converted.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.Equals(SharedCode.FluentTimeSpan)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.Add(SharedCode.FluentTimeSpan)">
            <summary>
            Adds two fluentTimeSpan according operator +.
            </summary>
            <param name="number">The number to add to this fluentTimeSpan.</param>
            <returns>The result of the addition operation.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.Subtract(SharedCode.FluentTimeSpan)">
            <summary>
            Subtracts the number according -.
            </summary>
            <param name="fluentTimeSpan">The matrix to subtract from this fluentTimeSpan.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data
            structures like a hash table.
            </returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an
            integer that indicates whether the current instance precedes, follows, or occurs in the
            same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return
            value has these meanings:
            <list type="table">
            <listheader>
            <term>Value</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term>Less than zero</term>
            <description>This instance precedes <paramref name="obj" /> in the sort order.</description>
            </item>
            <item>
            <term>Zero</term>
            <description>
            This instance occurs in the same position in the sort order as <paramref name="obj" />.
            </description>
            </item>
            <item>
            <term>Greater than zero</term>
            <description>This instance follows <paramref name="obj" /> in the sort order.</description>
            </item>
            </list>
            </returns>
            <exception cref="T:System.ArgumentException">obj</exception>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.CompareTo(System.TimeSpan)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The other.</param>
            <returns>The compare to.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.CompareTo(SharedCode.FluentTimeSpan)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The value.</param>
            <returns>The compare to.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.Negate">
            <summary>
            Negates this instance.
            </summary>
            <returns>The <see cref="P:SharedCode.FluentTimeSpan.TimeSpan" />.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.AddInternal(SharedCode.FluentTimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Internal addition function.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.FluentTimeSpan.SubtractInternal(SharedCode.FluentTimeSpan,SharedCode.FluentTimeSpan)">
            <summary>
            Internal subtraction function for the subtraction of fluentTimeSpans.
            </summary>
            <param name="left">The left hand side.</param>
            <param name="right">The right hand side.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="T:SharedCode.IO.BufferedWriter">
            <summary>
            Provides a base for buffered data writers.
            </summary>
        </member>
        <member name="F:SharedCode.IO.BufferedWriter.BufferLength">
            <summary>
            The buffer length
            </summary>
        </member>
        <member name="F:SharedCode.IO.BufferedWriter.FinishedTask">
            <summary>
            The finished task
            </summary>
        </member>
        <member name="F:SharedCode.IO.BufferedWriter.writer">
            <summary>
            The writer
            </summary>
        </member>
        <member name="F:SharedCode.IO.BufferedWriter.disposedValue">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="M:SharedCode.IO.BufferedWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:SharedCode.IO.BufferedWriter" /> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:SharedCode.IO.BufferedWriter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:SharedCode.IO.BufferedWriter" /> class.
            </summary>
        </member>
        <member name="P:SharedCode.IO.BufferedWriter.StringBuilder">
            <summary>
            Gets the string builder.
            </summary>
            <value>The string builder.</value>
        </member>
        <member name="M:SharedCode.IO.BufferedWriter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting
            unmanaged resources.
            </summary>
        </member>
        <member name="M:SharedCode.IO.BufferedWriter.FullFlush">
            <summary>
            Performs a full flush of the buffer.
            </summary>
        </member>
        <member name="M:SharedCode.IO.BufferedWriter.FullFlushAsync(System.Threading.CancellationToken)">
            <summary>
            Performs a full flush of the buffer as an asynchronous operation.
            </summary>
            <param name="token">The token.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:SharedCode.IO.BufferedWriter.StrongFlush">
            <summary>
            Performs a strong flush of the buffer.
            </summary>
        </member>
        <member name="M:SharedCode.IO.BufferedWriter.StrongFlushAsync(System.Threading.CancellationToken)">
            <summary>
            Performs a strong flush of the buffer as an asynchronous operation.
            </summary>
            <param name="token">The token.</param>
            <returns>A Task.</returns>
        </member>
        <member name="M:SharedCode.IO.BufferedWriter.WeakFlush">
            <summary>
            Performs a weak flush of the buffer.
            </summary>
        </member>
        <member name="M:SharedCode.IO.BufferedWriter.WeakFlushAsync">
            <summary>
            Performs a weak flush of the buffer as an asynchronous operation.
            </summary>
            <returns>A Task.</returns>
        </member>
        <member name="M:SharedCode.IO.BufferedWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
            <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release
            only unmanaged resources.
            </param>
        </member>
        <member name="T:SharedCode.IO.StreamExtensions">
            <summary>
            The stream extension methods class.
            </summary>
        </member>
        <member name="M:SharedCode.IO.StreamExtensions.FitImage(System.IO.Stream,System.Int32,System.Int32,System.Boolean,System.Int64)">
            <summary>
            Fits an image into the dimensions if it is too large to fit in the specified maximum size.
            </summary>
            <param name="stream">The stream.</param>
            <param name="maxWidth">The maximum width.</param>
            <param name="maxHeight">The maximum height.</param>
            <param name="makeSquare">A value indicating whether the output dimensions should be square.</param>
            <param name="quality">The encoder quality in percent (90% recommended, the default).</param>
            <returns>The thumbnail image.</returns>
            <exception cref="T:System.ArgumentNullException">The input stream cannot be null.</exception>
        </member>
        <member name="T:SharedCode.Linq.CollectionExtensions">
            <summary>
            Extensions for the ICollection interface.
            </summary>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.AddRange``2(``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all of the given items to this collection. Can be used with dictionaries, which
            implement <see cref="T:System.Collections.Generic.ICollection`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" /> where
            <typeparamref name="T" /> is <see cref="T:System.Collections.Generic.KeyValuePair`2" />.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items to be added.</param>
            <returns>The collection.</returns>
            <exception cref="T:System.ArgumentNullException">collection or items</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.AddRangeIfRangeNotNull``2(``1,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds all of the given items to this collection if and only if the values object is not
            null. See <see cref="M:SharedCode.Linq.CollectionExtensions.AddRange``2(``1,System.Collections.Generic.IEnumerable{``0})" /> for more details.
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
            <typeparam name="TCollection">The type of the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items to be added.</param>
            <returns>The collection.</returns>
            <exception cref="T:System.ArgumentNullException">collection or items</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.Find``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Finds the specified collection.
            </summary>
            <typeparam name="T">Type of object to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="predicate">The predicate.</param>
            <returns>The object or a new object of type T.</returns>
            <exception cref="T:System.ArgumentNullException">collection or predicate</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.FindAll``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Finds all.
            </summary>
            <typeparam name="T">Type of object to look for.</typeparam>
            <param name="collection">The collection.</param>
            <param name="predicate">The predicate.</param>
            <returns>A new collection of T.</returns>
            <exception cref="T:System.ArgumentNullException">collection or predicate</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.FindIndex``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Finds the index.
            </summary>
            <typeparam name="T">The type of elements to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="predicate">The predicate.</param>
            <returns>The find index.</returns>
            <exception cref="T:System.ArgumentNullException">collection or predicate</exception>
            <exception cref="T:System.ArgumentException">The collection cannot be empty.</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.FindIndex``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Finds the index.
            </summary>
            <typeparam name="T">The type of the elements to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="startIndex">The start index.</param>
            <param name="predicate">The predicate.</param>
            <returns>The find index.</returns>
            <exception cref="T:System.ArgumentNullException">collection or predicate</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The startIndex is out of range of the collection.
            </exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.FindIndex``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Finds the index.
            </summary>
            <typeparam name="T">The type of the elements to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="predicate">The predicate.</param>
            <returns>The find index.</returns>
            <exception cref="T:System.ArgumentNullException">collection or predicate</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The startIndex is out of range of the collection.
            </exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.FindLast``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Finds the last.
            </summary>
            <typeparam name="T">The type of the elements to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="predicate">The predicate.</param>
            <returns>The element or a default instance of the type searched for.</returns>
            <exception cref="T:System.ArgumentNullException">collection or predicate</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.FindLastIndex``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Finds the last index.
            </summary>
            <typeparam name="T">The type of the elements to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="predicate">The predicate.</param>
            <returns>The find last index.</returns>
            <exception cref="T:System.ArgumentNullException">collection or predicate</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The startIndex is out of range of the collection.
            </exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.FindLastIndex``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Predicate{``0})">
            <summary>
            Finds the last index.
            </summary>
            <typeparam name="T">The type of the elements to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="startIndex">The start index.</param>
            <param name="predicate">The predicate.</param>
            <returns>The find last index.</returns>
            <exception cref="T:System.ArgumentNullException">collection or predicate</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The startIndex is out of range of the collection.
            </exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.FindLastIndex``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            Finds the last index.
            </summary>
            <typeparam name="T">The type of the elements to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
            <param name="predicate">The predicate.</param>
            <returns>The find last index.</returns>
            <exception cref="T:System.ArgumentNullException">collection or predicate</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The startIndex is out of range of the collection.
            </exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.ForEach``1(System.Collections.Generic.ICollection{``0},System.Action{``0})">
            <summary>
            Loops over the collection performing action on each element.
            </summary>
            <typeparam name="T">The type of the elements to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="action">The action.</param>
            <exception cref="T:System.ArgumentNullException">collection or action</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the specified collection is null original empty.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection.</param>
            <returns>
            <c>true</c> if the specified collection is null original empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Removes all.
            </summary>
            <typeparam name="T">The type of the elements to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="match">The match.</param>
            <returns>The remove all.</returns>
            <exception cref="T:System.ArgumentNullException">collection or match</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes the specified range of items from the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items.</param>
            <returns>
            An <c>IEnumerable{System.Boolean}</c> indicating whether the items were found and removed.
            </returns>
            <exception cref="T:System.ArgumentNullException">collection or items</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
            Removes the specified range of items from the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection.</param>
            <param name="items">The items.</param>
            <returns>
            An <c>IEnumerable{System.Boolean}</c> indicating whether the items were found and removed.
            </returns>
            <exception cref="T:System.ArgumentNullException">collection or items</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.SyncFrom``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Synchronizes the items in two collections, performing a minimal number of operations.
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
            <typeparam name="TKey">The type of the attribute key.</typeparam>
            <param name="collection">The collection.</param>
            <param name="source">The source collection.</param>
            <param name="getKey">The function used to get the attribute keys.</param>
            <returns>A <c>SyncChanges{T}</c> object containing the changes.</returns>
            <remarks>
            This preserves existing items in the collection, so selections are not lost when used on
            an ObservableCollection.
            </remarks>
            <exception cref="T:System.ArgumentNullException">collection or source or getKey</exception>
            <exception cref="T:System.ArgumentException">source cannot be empty.</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.SyncFrom``2(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Synchronizes the items in two collections, performing a minimal number of operations.
            </summary>
            <typeparam name="T">The type of items in the collection</typeparam>
            <typeparam name="TKey">The type of the attribute key.</typeparam>
            <param name="collection">The collection.</param>
            <param name="newKeys">The new attribute keys.</param>
            <param name="getKey">The function used to get the attribute keys.</param>
            <param name="getObject">The function used to get the objects.</param>
            <returns>A <c>SyncChanges{T}</c> object containing the changes.</returns>
            <remarks>
            This preserves existing items in the collection, so selections are not lost when used on
            an ObservableCollection.
            </remarks>
            <exception cref="T:System.ArgumentNullException">collection or newKeys or getKey or getObject</exception>
        </member>
        <member name="M:SharedCode.Linq.CollectionExtensions.TrueForAll``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Trues for all.
            </summary>
            <typeparam name="T">The type of the elements to find.</typeparam>
            <param name="collection">The collection.</param>
            <param name="match">The match.</param>
            <returns>The true for all.</returns>
            <exception cref="T:System.ArgumentNullException">collection or match</exception>
        </member>
        <member name="T:SharedCode.Linq.CollectionExtensions.SyncChanges`1">
            <summary>
            Describes changes made while syncing a collection.
            </summary>
            <typeparam name="T">The type of item synced.</typeparam>
        </member>
        <member name="F:SharedCode.Linq.CollectionExtensions.SyncChanges`1.added">
            <summary>
            The added items.
            </summary>
        </member>
        <member name="F:SharedCode.Linq.CollectionExtensions.SyncChanges`1.removed">
            <summary>
            The removed items.
            </summary>
        </member>
        <member name="P:SharedCode.Linq.CollectionExtensions.SyncChanges`1.Added">
            <summary>
            Gets the items added during the sync.
            </summary>
            <value>The added items.</value>
        </member>
        <member name="P:SharedCode.Linq.CollectionExtensions.SyncChanges`1.Removed">
            <summary>
            Gets the items removed during the sync.
            </summary>
            <value>The removed items.</value>
        </member>
        <member name="T:SharedCode.Linq.PredicateBuilder">
            <summary>
            The predicate builder class.
            </summary>
        </member>
        <member name="M:SharedCode.Linq.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns an expression for the &amp;&amp; operator with the specified left and right sides.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <param name="left">The left expression.</param>
            <param name="right">The right expression.</param>
            <returns>
            An expression for the &amp;&amp; operator with the specified left and right sides.
            </returns>
            <exception cref="T:System.ArgumentNullException">left</exception>
        </member>
        <member name="M:SharedCode.Linq.PredicateBuilder.False``1">
            <summary>
            Returns a predicate expression that returns false.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <returns>A predicate expression that returns false.</returns>
        </member>
        <member name="M:SharedCode.Linq.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns an expression for the || operator with the specified left and right sides.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <param name="left">The left expression.</param>
            <param name="right">The right expression.</param>
            <returns>An expression for the || operator with the specified left and right sides.</returns>
            <exception cref="T:System.ArgumentNullException">left</exception>
        </member>
        <member name="M:SharedCode.Linq.PredicateBuilder.True``1">
            <summary>
            Returns a predicate expression that returns true.
            </summary>
            <typeparam name="T">The input type.</typeparam>
            <returns>A predicate expression that returns true.</returns>
        </member>
        <member name="T:SharedCode.Linq.Predicates">
            <summary>
            The predicates class.
            </summary>
            <summary>
            The predicates class.
            </summary>
        </member>
        <member name="M:SharedCode.Linq.Predicates.After(System.DateTime)">
            <summary>
            Returns a LINQ friendly expression that returns whether the date and time is after the
            specified date and time.
            </summary>
            <param name="after">The date and time to be after which we return true.</param>
            <returns>
            A LINQ friendly expression that returns whether the date and time is after the specified
            date and time.
            </returns>
        </member>
        <member name="M:SharedCode.Linq.Predicates.Before(System.DateTime)">
            <summary>
            Returns a LINQ friendly expression that returns whether the date and time is before the
            specified date and time.
            </summary>
            <param name="before">The date and time to be before which we return true.</param>
            <returns>
            A LINQ friendly expression that returns whether the date and time is before the
            specified date and time.
            </returns>
        </member>
        <member name="M:SharedCode.Linq.Predicates.Between(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Returns a LINQ friendly expression that takes a date and time and returns whether it
            falls between the start and end date times inclusive or exclusive of the end date time.
            </summary>
            <param name="startDateTime">The start date time.</param>
            <param name="endDateTime">The end date time.</param>
            <param name="endInclusive">
            if set to <c>true</c> include the end date and time in the comparison.
            </param>
            <returns>
            A LINQ friendly expression that takes a date and time and returns whether it falls
            between the start and end date times inclusive or exclusive of the end date time.
            </returns>
        </member>
        <member name="M:SharedCode.Linq.Predicates.After(System.DateTimeOffset)">
            <summary>
            Returns a LINQ friendly expression that returns whether the date and time is after the
            specified date and time.
            </summary>
            <param name="after">The date and time to be after which we return true.</param>
            <returns>
            A LINQ friendly expression that returns whether the date and time is after the specified
            date and time.
            </returns>
        </member>
        <member name="M:SharedCode.Linq.Predicates.Before(System.DateTimeOffset)">
            <summary>
            Returns a LINQ friendly expression that returns whether the date and time is before the
            specified date and time.
            </summary>
            <param name="before">The date and time to be before which we return true.</param>
            <returns>
            A LINQ friendly expression that returns whether the date and time is before the
            specified date and time.
            </returns>
        </member>
        <member name="M:SharedCode.Linq.Predicates.Between(System.DateTimeOffset,System.DateTimeOffset,System.Boolean)">
            <summary>
            Returns a LINQ friendly expression that takes a date and time and returns whether it
            falls between the start and end date times inclusive or exclusive of the end date time.
            </summary>
            <param name="start">The start date time.</param>
            <param name="end">The end date time.</param>
            <param name="inclusive">
            if set to <c>true</c> include the end date and time in the comparison.
            </param>
            <returns>
            A LINQ friendly expression that takes a date and time and returns whether it falls
            between the start and end date times inclusive or exclusive of the end date time.
            </returns>
        </member>
        <member name="T:SharedCode.NumberExtensions">
            <summary>
            Static class containing Fluent <see cref="T:System.DateTime" /> extension methods.
            </summary>
        </member>
        <member name="M:SharedCode.NumberExtensions.Days(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Days.
            </summary>
            <param name="days">The days.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Days(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Days.
            </summary>
            <param name="days">The days.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Hours(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Hours.
            </summary>
            <param name="hours">The hours.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Hours(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Hours.
            </summary>
            <param name="hours">The hours.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Milliseconds(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Milliseconds(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Minutes(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Minutes.
            </summary>
            <param name="minutes">The minutes.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Minutes(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Minutes.
            </summary>
            <param name="minutes">The minutes.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Months(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> value for given number of Months.
            </summary>
            <param name="months">The months.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Seconds(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Seconds.
            </summary>
            <param name="seconds">The seconds.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Seconds(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Seconds.
            </summary>
            <param name="seconds">The seconds.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Ticks(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of ticks.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Ticks(System.Int64)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of ticks.
            </summary>
            <param name="ticks">The ticks.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Weeks(System.Int32)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Weeks (number of weeks * 7).
            </summary>
            <param name="weeks">The weeks.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Weeks(System.Double)">
            <summary>
            Returns <see cref="T:System.TimeSpan" /> for given number of Weeks (number of weeks * 7).
            </summary>
            <param name="weeks">The weeks.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="M:SharedCode.NumberExtensions.Years(System.Int32)">
            <summary>
            Generates <see cref="T:System.TimeSpan" /> value for given number of Years.
            </summary>
            <param name="years">The years.</param>
            <returns>A fluent time span.</returns>
        </member>
        <member name="T:SharedCode.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SharedCode.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SharedCode.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:SharedCode.Properties.Resources.TheCollectionIsEmpty">
            <summary>
              Looks up a localized string similar to The collection is empty..
            </summary>
        </member>
    </members>
</doc>
